<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="588d791a-a056-4493-abf8-a20d1d8fdebd" activeEnvironment="Default" name="Stromae" resourceRoot="" soapui-version="5.5.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="eecdbc41-1543-4ee6-9616-27eec9c3f93d" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:8080" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://localhost:8080</con:endpoint></con:endpoints><con:resource name="Dr" path="/dr" id="3a1cd30d-3a94-40a5-88e7-21f5d34dafa1"><con:settings/><con:parameters/><con:method name="Dr 1" id="2da94a65-9723-410d-bcea-ba0c7ba09398" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="cd91f623-1a9b-4a96-999e-6fd4a17cf89f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request>{"fn":"test.txt","data":"LS0tLS1CRUdJTiBQR1AgTUVTU0FHRS0tLS0tDQpWZXJzaW9uOiBCQ1BHIHYxLjU3DQoNCm93SjRuRzJUVzR3VEJSU0d1NHVzMGppRzRBdVJkVmtnaHBpcWJhZlRkZ1pGbUdrNzArbGxPcDFwTzIyRmg3bjANCk1wMlpuYlp6cjRveEN1b0xFalNTZFRHWUtHc2t1MjVJWEtJWW80STNGb01FTUJwQnZEMFk0aVhFeEdBQ0JndUoNCmI1N0gvK0g4LzhuNXZ6M0FNdC9veU95ZjIrNkZiMy9zOHNqSlkyY0UzL2JkQWU3K0c0T2xDSkthcEFsNk1wOWkNCldaUkkzVlFCZjZYUk4yUjlhdE1rbHFDSlNUdjhRRFFPK0FGL3U1aktvekhCcXlZVUtKa2VPR2l4aGFxMWRDblANCmtsb2gyRzgxZ3BwV3plYmR1dG5YWVl4WE9UNWhOQjJIZ2tCWDViV1lEZmpMUkZPcmxUU3drY3V5V29BcXUwWGUNCjBDVTU3NEJSVkFRTnhmRkNMQmhEWUN3dUZ6THFGSm9yUnh0b3BGZFg1TGdoUnkwWjhHTWVuYXgxNG0wTXQvSlcNClY0VWlMT2ZRVEtxWFNGYWducWJ5elF5R1dsYWI2N202SGJRcW5HRjNZeVd4VzFPellxZWY0Mk9BSDlHeUEwSFENCkJTay9NS1pZT1pFR3VYd2V4UmhUNUZBT1IvU0NsdVlHcEkwWCs4T2dYdGhKcTFDVDdDVk5Vb2xUQktnNGdMK1oNCkpZdEUxSE5MRVF6S2tCVXEyZ3hGU0xlQTFCVytqTEJnc2NCWEdDaWJxOFk3RGNwZzY2YmNWV1VkWVRuSmExSWgNCm9RSU9yNkFJWllBSG5GUzJST09LaDRoaHhzbkVNYm5vTlZqWlJGb0JXS1lDSUo3UFVqbTA1UkFVamtnd1I2TE4NCmhzdEJwa1ZFaGkrcURqUXlHMnFhRmJxYkQ2b1dNMkE4UVFvYmFhVFhZaEs5YXNZT0lLMjZwQW9KUFNocVlqVkoNCkdSVW1FSFBKQWdYMWtYQWY4SE4xb3hzbFkwRmFDT1pKS3dDeHVHdEJzbUtHMmcxWmovYU1odWthR2E4TUlXV28NCklTS2lMZ1FkVEk4amthbHV1eVp3YWhMd0Z6RldiUS9xSWQ3c3VocmVvVEtGZEU3SkdBeklCc2dNTDVmS2pKUTINClZjSHNGMk5tMDJiMVNxckNHb2didHJFdTVyRFljRU9XcjhWek1HUzFjWWhJUnV0OGpZZTcrWGdyMXU5SVNhbmUNCndlTklNUmVGU1JYTDJCSWNKdmdzNnFCeGhZNzJYUU91bFhBVDhPc0ZSRVF6ZkNERndISGNwZlZtMHU0WGVuTGQNCnhkTmhnZUtTcFZTcWxZaEltTndTNEpwRjZCMGJ6R2tpN0hRNG1nd1A1R0d2QnlGTkhob0ZxSUlRSUwxZWlVOUwNCnRFR0lmTEJLOVZPcUV3TlQ2VExVWmhKdHBRUG5FY1lxZ1d6WHMyM2Rqa2lrbUlHSGZZQU5xaUU2aGdSSHc5V3kNCjFrSkFydE9TR21WQlY3SVE0Ti9jdHZBaTRMK0pWb3BLL2c5dXo0Mk0zK0liR2ZXTkxSKzlnYWJQdjJMbGY4RCsNCmN2elc2NDhmUXRadG5WLzE5NU96VC94MEJDYU9IRjZZLy8zdzEwOS9OL25SYUhyRmppdjc1M3lyRnE2K3g5UWUNCjJmZjhwWE4vM2YxT1E1VS8rNHBmWERtUm83Lzk5TlYzNmVMRXZ2bURXOWRpaTRzNjlxTjA0cW42ejlQcnIrOHYNCkk2ZlhYTys1ejV5Rk1rdi85R0ZjK1hBMnR1R050N2J6eEpiWlI1ZWRIcGRHTjQ0ZlVENi84T1dNNzlvSDN0aHINCm04L1NGMmZXWERpNmMreVA0eGNXZGk3TXZMUmpHN1ByMUJoN1QyVnN0amh6OXRtVEU2c3YvVkJhdWxqLzlmdjcNCjdBMUFZbTd0L0cxM2FZZVdQcm15ZEFheFgzNy9sV05ITisxNWVQbmlRd2ZmWk5kNWM2dFBiUTFmTzc5Mys5NFgNCnA3ZThBSHo4OWpmVEo4NDkrTnZFK2t0ZjhKZUJ3K01iNzloOS91cnJCdzdzbXJ2elg0Y290WGM9DQo9UE4wSw0KLS0tLS1FTkQgUEdQIE1FU1NBR0UtLS0tLQ0K","signKeyId":-6416965186945778448,"encKeyId":-6416965186945778448,"packetNo":0,"expiry":156959617462700}</con:request><con:originalUri>http://localhost/dr</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:restMockService id="cf87de4a-4698-48d3-8959-7dd8ccd499e4" port="8081" path="/" host="WS07" name="REST MockService 1" docroot=""><con:settings/><con:properties/><con:onRequestScript>log.info(mockRequest.getRequestContent())</con:onRequestScript><con:restMockAction name="/dr" method="POST" resourcePath="/dr" id="21c6b34c-6576-4d3b-8501-30f5be3ba1fe"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="8c8ffa13-0e92-4779-8888-10459360232f" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>Ok: hack</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/></con:soapui-project>