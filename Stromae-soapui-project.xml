<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="588d791a-a056-4493-abf8-a20d1d8fdebd" activeEnvironment="Default" name="Stromae" resourceRoot="" soapui-version="5.5.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="eecdbc41-1543-4ee6-9616-27eec9c3f93d" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:8080" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://localhost:8080</con:endpoint></con:endpoints><con:resource name="Dr" path="/dr" id="3a1cd30d-3a94-40a5-88e7-21f5d34dafa1"><con:settings/><con:parameters/><con:method name="Dr 1" id="2da94a65-9723-410d-bcea-ba0c7ba09398" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="cd91f623-1a9b-4a96-999e-6fd4a17cf89f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request>{"fn":"test.txt","data":"LS0tLS1CRUdJTiBQR1AgTUVTU0FHRS0tLS0tDQpWZXJzaW9uOiBCQ1BHIHYxLjU3DQoNCmhRRU1BNmJ5WENrNERIendBUWYvVGhTR2FpRERVYm1qZlVQa0oxempPS1AxYkJlRHpPWkYyZy9nWko5ckRnaVkNClNxNjIwN3REd0pYTEpRSU8raGE3di90LzFEZHkwYVN6cHdtVWs0YmQwQUxCM3UwRUNXTnpMa3V2bW43SUtkbUkNCnNTcWRJcXFCV3NmRWc1VXRpUUw0RVJqcXJtZDBqRzZ1bittTEtmRTFPT2ZNZTZseUNhblEyMk94S2tOUE9mVWcNCjRqNFhxVS85VnZGVytEQjZtSW52bWtIWm05NHJoOFRKRzRuMTdEUWg5Y0dmdUppRG11VmFzS3ExQ3F3TEh4ZTYNCnpDeFZaQVRLMWtSMkloUzBLRkRyUWc4blE3RS9yME1PY3Ywemk3SXZrajNvZGhDZmwrb0JGV2duQnhxTUJuaGINCjJZdVBMcHlSL3UyekZETTFTYlgvSjMrOXc4Wm53Rm5scklGS0VDRFp1OUxBRlFIS01SYUUzUU9lZ1dLb1U3Z3MNCmtYSW5YS1U5c3RabTluNllLU2h3YUxGUnF0Tnp5NExtV043ZGEzUmFHMTZoVS81YVpQbVF2ejFveWFpckQrYm4NCk1nQy8rZmtGNXhtOFg3NjB6OUp4SzJwVlE2cVBrWWpUOFgrZS9xYmtFU1ErVHFRRFNjMnJxekZ4bHpQL0pGd1INCkJZNDVIanRYcVBzM2VzR3QvR3UwNVgxcVFMUkVPYUFabHRkUkRoR29JSTJlWXVqaWVZc3JZaDZTQ2FiaTNlVU8NCmdRU2g0dWg0WjRiTlArNkV3bGUzK3ZYcDZCdlczQ2FpWWNHSkQ3RU9EY3Z5cm5PVlhENzFIem5vbmtRTitJMHkNCktxaE5uSkRNL3c9PQ0KPWxva3gNCi0tLS0tRU5EIFBHUCBNRVNTQUdFLS0tLS0NCg==","signKeyId":-6416965186945778448,"encKeyId":-6416965186945778448,"packetNo":3,"expiry":1569601435432,"signature":"LS0tLS1CRUdJTiBQR1AgTUVTU0FHRS0tLS0tDQpWZXJzaW9uOiBCQ1BHIHYxLjU3DQoNCm93SjRuQUZXQWFuK2tBMERBQUlCcHZKY0tUZ01mUEFCeXlaaUFGMk9OYWZDL2NNV0JWRERrOHlOS0w1RUNFK0cNCjZhMVVwUC9ON09pcGdHV20xLzJSdDRrQkhBUUFBUUlBQmdVQ1hZNDFwd0FLQ1JDbThsd3BPQXg4OEw0NkIvOXMNCmtPR2ljUS9IeHJ1YnpvSkVtWDlTbm9FeDlaZnNPWkpnS3RmaStwN05YN2hheFp4TVpqZWhLOU9GRUFOSkN3b20NCjdWMlNYSzNNMVFXM0g3OWVEcS9BU2lWK25EczJ4TnM3dkc2Zk9WNXFsUndZbWgwK1dSZWJDVEFYYU05OC9JVmsNCng2THJEeGtkR2dJaTZyckhvZzFWUFlpTDdrSXBqd3lSR1Zic1RpNzZWMjFSRVFDM2QyK3BQNlV6RS9iSVdpVzINCkVNenBSV0VaQVpOQm9lVGFqdXBpbnVEK0JrbmVReCtULzZ3cEhhMGpwZG9PcnVlLytzWXlJajBITUh1T2hxRDUNCkdyK3lMRHZqRWtZVDdmcHhWSkZBOXQ1b21IZW1QR3NMWUlQZVNnNk9wKzF3UmhRRGlzZGI2WlNDMVRmemg4ZEkNCm9BVHJ6Q1JXbjhOQ3l0a3BiempSQm1tZFV3PT0NCj14MGtSDQotLS0tLUVORCBQR1AgTUVTU0FHRS0tLS0tDQo=","hash":"wv3DFgVQw5PMjSi+RAhPhumtVKT/zezoqYBlptf9kbc="}</con:request><con:originalUri>http://localhost/dr</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:restMockService id="cf87de4a-4698-48d3-8959-7dd8ccd499e4" port="8081" path="/" host="WS07" name="REST MockService 1" docroot=""><con:settings/><con:properties/><con:onRequestScript>log.info(mockRequest.getRequestContent())</con:onRequestScript><con:restMockAction name="/dr" method="POST" resourcePath="/dr" id="21c6b34c-6576-4d3b-8501-30f5be3ba1fe"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="8c8ffa13-0e92-4779-8888-10459360232f" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>Ok: hack</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/></con:soapui-project>